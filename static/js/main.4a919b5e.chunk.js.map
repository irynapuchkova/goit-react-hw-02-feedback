{"version":3,"sources":["Section /Section.styled.jsx","Section /Section.jsx","Statistics/Statistics.styled.jsx","Statistics/Statistics.jsx","FeedbackOptions/FeedbackOptions.styled.jsx","FeedbackOptions/FeedbackOptions.jsx","Notification/Notification.styled.jsx","Notification/Notification.jsx","App/App.styled.jsx","App/App.jsx","index.js"],"names":["Wrapper","styled","div","Title","h2","props","primary","Section","children","title","FeedbackOptions","FeedbackItem","p","Counter","span","Total","Percentage","Statistics","good","neutral","bad","total","positivePercentage","BtnList","Button","button","bgColor","options","onLeaveFeedback","map","option","type","onClick","Message","Notification","message","Container","App","state","e","target","textContent","toLowerCase","hasOwnProperty","setState","prev","countTotalFeedback","Object","values","reduce","next","countPositiveFeedbackPercentage","Number","parseInt","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a919b5e.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\nwidth: 500px;\n`\nexport const Title = styled.h2`\n  font-size: 36px;\n  color: ${(props) => props.primary ? 'darkslateblue' : 'darkred'}; \n`","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Wrapper, Title } from './Section.styled';\n\nexport default function Section({ children, title, primary}) {\n  return (\n    <Wrapper>\n      {title &&\n        <Title primary={primary}>{title}</Title>}\n      {children}\n    </Wrapper>\n  )\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  primary: PropTypes.bool,\n  children: PropTypes.node,\n}","import styled from \"@emotion/styled\";\n\nexport const FeedbackOptions = styled.div`\ndisplay: flex;\nflex-direction: column;\n\npadding-left: 20px;\n`\nexport const FeedbackItem = styled.p`\ndisplay: flex;\nmargin-block-end: 10px;\n\ntext-decoration: none;\ncolor: darkslateblue;\n`\nexport const Counter = styled.span`\ncolor: darkred;\n`\nexport const Total = styled.span`\ncolor: darkred;\n`\nexport const Percentage = styled.span`\ncolor: darkred;\n`","import 'index.css';\nimport React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { FeedbackOptions, FeedbackItem, Counter, Percentage, Total} from './Statistics.styled';\n  \nexport default function Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <FeedbackOptions>\n        \n      <FeedbackItem>Good:\n        <Counter>{good}</Counter></FeedbackItem>\n      <FeedbackItem>Neutral:\n        <Counter>{neutral}</Counter></FeedbackItem>\n      <FeedbackItem>Bad:\n        <Counter>{bad}</Counter></FeedbackItem>\n        \n      <FeedbackItem>Total: \n        <Total>{total}\n        </Total>\n      </FeedbackItem>\n        \n      <FeedbackItem>Positive feedback: \n        <Percentage>\n          {positivePercentage >= 0\n            ? positivePercentage\n            : 0} %\n        </Percentage>\n      </FeedbackItem>\n    </FeedbackOptions>\n  )\n}\n\nStatistics.propTypes = {\n  options: PropTypes.shape({\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n  }),\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number\n}","import styled from \"@emotion/styled\";\n\nexport const BtnList = styled.div`\ndisplay: flex;\nflex-direction: row;\n`\n\nexport const Button = styled.button`\npadding: 5px 10px;\nmargin-right: 10px;\n\nwidth: 90px;\nheight: 35px;\n\ntext-transform: capitalize;\n\nborder-radius: 5px;\ncursor: pointer;\n\n  &:hover,\n  &:focus {\n  color: darkslateblue;\n  border: none;\n  background-color: ${props => {\n      switch (props.bgColor) {\n        case \"good\":\n          return 'yellowgreen';\n        case \"neutral\":\n          return 'yellow';\n        case \"bad\":\n          return 'lightblue';\n        default:\n          return 'grey';\n      }}\n    }\n  }\n` ","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {BtnList, Button} from './FeedbackOptions.styled';\n\nexport default function FeedbackOptions({options, onLeaveFeedback}) {\n \n  return (\n    <BtnList>\n      {options.map((option) =>\n      {return (\n        <Button\n          key={option}\n          type='button'\n          bgColor = {option}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </Button>\n      )})}\n    </BtnList>\n  )\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string.isRequired)\n}","import styled from \"@emotion/styled\";\n\nexport const Message = styled.p`\ncolor: red;\n`","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {Message} from './Notification.styled';\n\nexport default function Notification({message}) {\n  return (\n    <Message\n      type='text'\n      >{message}\n    </Message>\n  )\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n}","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 100px;\n`\n\n\n","import 'normalize.css';\n\nimport { Component } from 'react';\n\nimport Section from 'Section ';\nimport Statistics from 'Statistics';\nimport FeedbackOptions from 'FeedbackOptions';\nimport Notification from 'Notification';\nimport {Container}  from './App.styled';\n\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n  \n  onClick = (e) => {\n    const option = e.target.textContent.toLowerCase();\n    if (this.state.hasOwnProperty(option)) {\n      return (this.setState((prev) => ({\n        [option]: prev[option] + 1,\n        })\n      ))\n    }\n  }\n\n  countTotalFeedback = () =>{\n    const sum = Object.values(this.state);\n    const total = sum.reduce((prev, next) => prev + next );\n    return total;\n  }\n\n  countPositiveFeedbackPercentage = (total) => {\n    const positivePercentage = this.state.good * 100 / total;\n    const parsedPositivePercentage = Number.parseInt(positivePercentage);\n    return parsedPositivePercentage;\n  }\n\n  render() {\n    const options = Object.keys(this.state);\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage(total);\n\n    return (\n    <Container >\n      <Section title=\"Please, tell us about us)))\"  primary>\n        <FeedbackOptions\n        options = {options}\n        onLeaveFeedback={this.onClick}\n      />\n      </Section>\n      \n      <Section title=\"Statistics\">\n        {total === 0 &&\n          <Notification\n            message='No feedback given' />\n        }\n        {total !== 0 &&\n      < Statistics\n        good={this.state.good}\n        neutral={this.state.neutral}\n        bad={this.state.bad}\n        total={total}\n        positivePercentage={positivePercentage}\n      />}\n        \n      </Section>\n    </Container>\n  )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}